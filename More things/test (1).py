# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TIrmmX1Fl0f_QoecMOMpIBHPglEQ31Nl

##Basic library imports
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install easyocr

import os
import pandas as pd
import easyocr
import matplotlib.pyplot as plt
import cv2
import numpy as np
import csv
os.mkdir('./dataset')

"""### Read Dataset"""

DATASET_FOLDER = './dataset/'
train = pd.read_csv(os.path.join(DATASET_FOLDER, 'train.csv'))
#test = pd.read_csv(os.path.join(DATASET_FOLDER, 'test.csv'))
#sample_test = pd.read_csv(os.path.join(DATASET_FOLDER, 'sample_test.csv'))
#sample_test_out = pd.read_csv(os.path.join(DATASET_FOLDER, 'sample_test_out.csv'))

"""### Run Sanity check using src/sanity.py"""

#!python3 sanity.py --test_filename ../dataset/sample_test.csv --output_filename ../dataset/sample_test_out.csv

#!python3 sanity.py --test_filename ../dataset/sample_test.csv --output_filename ../dataset/sample_test_out_fail.csv

def load_image(image_path):
    return cv2.imread(image_path)

# Function to perform OCR and display results
def perform_ocr(image_path):
    # Initialize the EasyOCR reader
    reader = easyocr.Reader(['en'])  # 'en' for English

    # Read the image
    image = load_image(image_path)
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Perform OCR
    results = reader.readtext(image_rgb)

    # Create a copy of the image for drawing
    output_image = image_rgb.copy()

    #Plot the results
    # for (bbox, text, prob) in results:
    #     # Unpack the bounding box
    #     (tl, tr, br, bl) = bbox
    #     tl = (int(tl[0]), int(tl[1]))
    #     br = (int(br[0]), int(br[1]))

    #     # Draw the bounding box and text
    #     cv2.rectangle(output_image, tl, br, (0, 255, 0), 2)
    #     cv2.putText(output_image, text, (tl[0], tl[1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

    # # Display the image with bounding boxes
    # plt.figure(figsize=(20,20))
    # plt.imshow(output_image)
    # plt.axis('off')
    # plt.show()

    # Print the extracted text
    #print("Extracted Text:")
    test1=[]
    for (bbox, text, prob) in results:
        #print(f"{text} (Confidence: {prob:.2f})")
        test1.append(text)

    # Function to extract specific information (example for weight and voltage)
    def extract_info(results):
        info = {'weight': None, 'voltage': None}
        for (bbox, text, prob) in results:
            if 'g' in text.lower() or 'kg' in text.lower():
                info['weight'] = text
            elif 'v' in text.lower():
                info['voltage'] = text
        return info

    # Extract and print specific information
    # extracted_info = extract_info(results)
    # print("\nExtracted Information:")
    # print(f"Weight: {extracted_info['weight']}")
    # print(f"Voltage: {extracted_info['voltage']}")
    return test1

"""### Download images"""

paths=os.listdir('../images')
paths





pwd()

from utils import download_image
a=0
os.mkdir('./images')

for index,row in train.iterrows():
    imgpath=download_image(row['image_link'], save_folder='./images')
    s=row['entity_value'] + row['entity_name']
    with open("new.txt", mode='a',encoding='utf-8') as ft1:
          ft1.write(s+'\n')
    print(imgpath)
    extr=perform_ocr(imgpath)
    os.remove(imgpath)
    s = str(extr)
    with open("new1.txt", mode='a',encoding='utf-8') as ft:
          ft.write(s+'\n')

    a+=1
    if a==1000:
        break

print(imgpath)

# import gc

# paths=os.listdir('./images')
# for imgpath1 in paths:

#     imgpath = os.path.join('./images', imgpath1)
#     if imgpath.endswith('.jpg'):
#         print(imgpath)
#         extr=perform_ocr(imgpath)
#         os.remove(imgpath)
#         s = str(extr)
#         with open("new.txt", mode='a',encoding='utf-8') as ft:
#             ft.write(s+'\n')
#     else :
#         pass

#     gc.collect()
#     # a+=1
#     # print(a)
#     # if a==100:
#     #     break

len(os.listdir('../images'))

#rm -rf ../images

gc.collect()

